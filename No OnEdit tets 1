/*
Author: Isaac Alvarado.
*/

function onEdit(e) {
  const range = e.range; //range of active cell
  const sheet = e.source.getActiveSheet(); //get active sheet
  const sheetName = sheet.getName(); //get sheet name
  const startRow = range.getRow(); //row edited ange starts
  const numRows = range.getNumRows(); //total rows on edited range
  const numCols = range.getNumColumns(); //total columns on edited range

  /*
    Iterates through each edited cell  callin @handelEdit
    Ensures multi-edits are handle correctly 
  */
  if (sheetName === 'Device List') {
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = spreadsheet.getSheets()[0]
    for (let row = 0; row < numRows; row++) {
      for (let col = 0; col < numCols; col++) {
        const cell = sheet.getRange(startRow + row, range.getColumn() + col);
        handleEdit(cell, startRow + row);
      }
    }
    columnsFilled(0);
  }
}

/**@handleEdits
 * Handles single cell edits
 * @param {GoogleAppscript.Spreadsheet.Sheet} sheet - active sheet.
 * @param {GoogleAppscript.Spreadsheet.Range} cell - active cell.
 * @param {number} row - row number of edited cell.
 */

function handleEdit(cell, row) {
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = spreadsheet.getSheets()[0];
  const col = cell.getColumn();

  /*
    Update "Last modified on" time stamp and "Modified by" for edited rows
  */
  if (col < 6 && row !== 1) {
    const timeStamp = new Date();
    sheet.getRange(row, 6).setValue(timeStamp);
    const modifiedBy = Session.getActiveUser().getEmail();
    sheet.getRange(row, 7).setValue(modifiedBy);
  }

  /*
    All CAPS columns A, D & E
  */
  if(col === 1 || col === 4 || col === 5){
    const value = cell.getValue();
    cell.setValue(value.toString().toUpperCase());
  }
  

  /*
    Handle column A editds
    If not duplicate, call handleLabel Function
  */
  if (col === 1) {
    if (!markDuplicates(cell, row)) {
      handleLabel(cell, row); //call handleLabel
    }
  }
}



/**@markDuplicates
 * Check duplicated values on column A
 * @param {GoogleAppscript.Spreadsheet.Sheet} sheet - active sheet.
 * @param {GoogleAppscript.Spreadsheet.Range} cell - active cell.
 * @param {number} row - current row number.
 */
function markDuplicates(range, currentRow) {
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = spreadsheet.getSheets()[0]
  const data = sheet.getRange("A2:A" + sheet.getLastRow()).getValues(); //get all values from column A
  let duplicateTracker = {}; //keep track of duplicate values column A
  let isDuplicate = false; //boolean that marks current cell as duplicate

  /*
    Iterates through each value of the range A2:A 
  */
  for (let i = 0; i < data.length; i++) {
    const value = data[i][0]; //value of row i:column A
    //Check if cell is not empty 
    if (value) {
      //If value already exist on duplicateTracker, mark as duplicate
      if (duplicateTracker[value]) {
        sheet.getRange("B" + (i + 2)).setValue("DUPLICATE LABEL").setBackground("#ea9999");
        //If current row mathces row of duplicate, isDuplicate set "true"
        if ((i + 2) === currentRow) {
          isDuplicate = true; 
        }
      } else {
        duplicateTracker[value] = true; 
      }
    }
  }
  //Marks & formats column B adjacent cell as duplicate
  if (isDuplicate) {
    range.offset(0, 1).setValue("DUPLICATE LABEL").setBackground("#ea9999");
  }

  return isDuplicate;
}


/**@handleLabel
 * Updates values set on column B determined by changes on column A 
 * @param {GoogleAppscript.Spreadsheet.Sheet} sheet - active sheet.
 * @param {GoogleAppscript.Spreadsheet.Range} cell - active cell.
 * @param {number} row - current row number.
 */
function handleLabel(range, row) {
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = spreadsheet.getSheets()[0]
  const cellValue = range.getValue(); //edited cell on column A
  const nextCell = range.offset(0, 1); //cell adjacent to cellValue on column B
  const unique = isUniqueLabel(cellValue, row); //calls isUniqueLabel() function

  /* 
    Check if cell on column A is not duplicate
  */
  if (unique) {
    let label;
    let color = "white";
    
    //Determines what case applies and sets column edited column A & adjacent column B to correct format & values
    switch (true) {
      case cellValue.startsWith("CR "):
        label = "Access";
        break;
      case cellValue.startsWith("CAM "):
        label = "CCTV";
        break;
      case cellValue.startsWith("I "):
        label = "Intercom";
        break;
      case cellValue.startsWith("M "):
        label = "Monitor Point";
        break;
      case cellValue === "":
        nextCell.clearContent();
        return;
      default:
        label = "INCORRECT LABEL";
        color = "#f9cb9c";
    }

    nextCell.setValue(label).setBackground(color); //sets column B nextCell value & background to correct color 
    range.setBackground(color); //sets column A cell background color
  } else {
    nextCell.clearContent(); //if label in column A is duplicate, clear color & value
  }
}


/**@columnsFilled
 * Applies conditional formating to columns
 * @param {GoogleAppscript.Spreadsheet.Sheet} sheet - active sheet.
 */
function columnsFilled(sheetNum) {
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = spreadsheet.getSheets()[sheetNum]
  const data = sheet.getRange("A2:A" + sheet.getLastRow()).getValues();

  for (let row = 0; row < data.length; row++) {
    const valueA = data[row][0];
    const rowIndex = row + 2; //header row
    const cells = [
      sheet.getRange("A" + rowIndex),
      sheet.getRange("B" + rowIndex),
      sheet.getRange("C" + rowIndex),
      sheet.getRange("D" + rowIndex),
      sheet.getRange("E" + rowIndex),
    ];

    //If cell in column A is empty, set cells from columns A & B to white
    if (!valueA) {
      cells[0].setBackground("white");
      cells[1].setBackground("white");
    }
    
    updateCellBackgroundAndNote(cells[2], valueA, "Please change status", "#f9cb9c"); //calls updateCellBackgroundAndNote Function and applies format based on valueof column A for column C
    updateCellBackgroundAndNote(cells[3], valueA, "Please add Project Name (CDRXXXXX)", "#f9cb9c"); //calls updateCellBackgroundAndNote Function and applies format based on valueof column A for column D
    updateCellBackgroundAndNote(cells[4], valueA, "Please add Stage (STAGE X)", "#f9cb9c"); //calls updateCellBackgroundAndNote Function and applies format based on valueof column A for column E
  }
}

/**@updateCellBackgroundAndNote
 * Updates background color and add a note based on condition
 * @param {GoogleAppscript.Spreadsheet.Range} cell - cell to update.
 * @param {any} condition - condition to check. 
 * @param {string} note - note to be added to cell. 
 * @param {string} color - hex color to be added to background
 */
function updateCellBackgroundAndNote(cell, condition, note, color) {
  if (condition && !cell.getValue()) {
    cell.setBackground(color);
    cell.setNote(note);
  } else {
    cell.setBackground("white");
    cell.clearNote();
  }
}

/**@isUniqueLabel
 * Check duplicated values on column A
 * @param {GoogleAppscript.Spreadsheet.Sheet} sheet - active sheet.
 * @param {string} value - value to check.
 * @param {number} currentRow - current row number.
 * @returns {boolean} - true if label is unique
 */
function isUniqueLabel(value, currentRow) {
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = spreadsheet.getSheets()[0]
  const data = sheet.getRange("A2:A" + sheet.getLastRow()).getValues();
  for (let i = 0; i < data.length; i++) {
    if (data[i][0] === value && (i + 2) !== currentRow) {
      return false;
    }
  }
  return true;
}
